package stackarray;

public class StackUsingArray {
	private int data[];   //no access to data to anyone 
	private int topIndex;


	public StackUsingArray() {
		data=new int[3];
		topIndex=-1; //index of top most elements in the array
	}
	public StackUsingArray(int size) {
		data=new int[size];
		topIndex=-1; 
	}
	
	//0(1)
	public void push(int element)  {
		if(topIndex==data.length-1) {

			 DoubleCapacity();
			//throw  new StackFullException("Exception occurred because Stack is Full!");
			//throw exception
		}

		topIndex++;
		data[topIndex]=element;
	}

	private void DoubleCapacity() {
		System.out.println("Welcome to double capacity");
		int temp[]=data;
		data=new int[2*temp.length];
		
		for(int i=0;i<temp.length;i++) {
			data[i]=temp[i];
		}
		
		
	}

	//0(1)
	public int size() {
		int len=topIndex+1;

		return len;
	}
	
	//0(1)
	public int top() throws StackEmptyException {
		if(topIndex==-1) {
			throw new StackEmptyException("Exception occurred because Stack is Empty!");
		}
		int value=data[topIndex];
		return value;
	}
	//0(1)
	public int pop() throws StackEmptyException {
		if(topIndex==-1) {
			throw new StackEmptyException("Exception occurred because Stack is Empty!");
		}
		int value=data[topIndex];
		data[topIndex]=0;
		topIndex--;

		return value;
	}
	
	//0(1)
	public boolean isEmpty() {
		if(topIndex==-1) {
			return true;
		}
		return false;
	}

}
//////////////////////////////main class/////////////////////
package stackarray;

public class StackUse {
	public static void main(String[] args) throws StackEmptyException {
		StackUsingArray stack=new StackUsingArray();
		int arr[]= {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34};
		
		for(int i=0;i<arr.length;i++) {
			stack.push(arr[i]);
		}
		while(!stack.isEmpty()) {
			System.out.println(stack.pop());
		}
		
		/*
		 * try { stack.push(10); stack.push(20); stack.push(30); stack.push(40); } catch
		 * (StackFullException e) { // TODO Auto-generated catch block
		 * e.printStackTrace(); }
		 * 
		 * 
		 * int value; try { value = stack.top(); System.out.println(value); } catch
		 * (StackEmptyException e) { // TODO Auto-generated catch block
		 * e.printStackTrace(); }
		 * 
		 * 
		 * try { value = stack.pop(); System.out.println(value); } catch
		 * (StackEmptyException e1) { // TODO Auto-generated catch block
		 * e1.printStackTrace(); }
		 * 
		 * try { value =stack.top(); System.out.println(value);
		 * 
		 * } catch (StackEmptyException e) { // TODO Auto-generated catch block
		 * e.printStackTrace(); } value = stack.size(); System.out.println(value);
		 * 
		 * boolean isEmpty=stack.isEmpty();
		 * 
		 * System.out.println(isEmpty); try { stack.pop(); stack.pop(); stack.pop();
		 * stack.pop();} catch(StackEmptyException e) { // e.printStackTrace();
		 * System.err.print(e); }
		 */
		
		
		
	}

}
